diff --git a/examples/osgpoints/osgpoints.cpp b/examples/osgpoints/osgpoints.cpp
index 3df360f..dc0945e 100644
--- a/examples/osgpoints/osgpoints.cpp
+++ b/examples/osgpoints/osgpoints.cpp
@@ -36,6 +36,7 @@ public:
             _stateset(stateset)
         {
             _point = new osg::Point;
+            _point->setSize(1.0);
             _point->setDistanceAttenuation(osg::Vec3(0.0,0.0000,0.05f));
             _stateset->setAttribute(_point.get());
         }
@@ -119,8 +120,7 @@ int main( int argc, char **argv )
     arguments.getApplicationUsage()->addCommandLineOption("--points","Sets the polygon mode to GL_POINT for front and back faces.");
 
 
-    // construct the viewer.
-    osgViewer::Viewer viewer;
+    
 
     bool shader = false;
     while (arguments.read("--shader")) shader = true;
@@ -143,6 +143,9 @@ int main( int argc, char **argv )
         arguments.getApplicationUsage()->write(std::cout,osg::ApplicationUsage::COMMAND_LINE_OPTION);
         return 1;
     }
+    
+    // construct the viewer.
+    osgViewer::Viewer viewer(arguments);
 
     // read the scene from the list of file specified commandline args.
     osg::ref_ptr<osg::Node> loadedModel = osgDB::readRefNodeFiles(arguments);
@@ -213,7 +216,6 @@ int main( int argc, char **argv )
 
         osg::Shader* vertex_shader = new osg::Shader(osg::Shader::VERTEX, vertexShaderSource);
         program->addShader(vertex_shader);
-
 #if 0
         //////////////////////////////////////////////////////////////////
         // fragment shader
@@ -221,7 +223,10 @@ int main( int argc, char **argv )
         char fragmentShaderSource[] =
             "void main(void) \n"
             "{ \n"
-            "    gl_FragColor = gl_Color; \n"
+            "    gl_FragColor[0] = gl_Color[0]/255.0;\n"
+            "    gl_FragColor[1] = gl_Color[1]/255.0;\n"
+            "    gl_FragColor[2] = gl_Color[2]/255.0;\n"
+            "    gl_FragColor[3] = gl_Color[3]/255.0;\n"
             "}\n";
 
         osg::Shader* fragment_shader = new osg::Shader(osg::Shader::FRAGMENT, fragmentShaderSource);
diff --git a/examples/osgvolume/osgvolume.cpp b/examples/osgvolume/osgvolume.cpp
index 0390ca9..eb448f5 100644
--- a/examples/osgvolume/osgvolume.cpp
+++ b/examples/osgvolume/osgvolume.cpp
@@ -420,8 +420,10 @@ int main( int argc, char **argv )
     arguments.getApplicationUsage()->addCommandLineOption("--s_maxTextureSize <size>","Set the texture maximum resolution in the s (x) dimension.");
     arguments.getApplicationUsage()->addCommandLineOption("--t_maxTextureSize <size>","Set the texture maximum resolution in the t (y) dimension.");
     arguments.getApplicationUsage()->addCommandLineOption("--r_maxTextureSize <size>","Set the texture maximum resolution in the r (z) dimension.");
+    arguments.getApplicationUsage()->addCommandLineOption("--modulate-alpha-by-colour <colourModulate.x()> <colourModulate.y()> <colourModulate.z()> <colourModulate.w()>","For each pixel multiply the alpha value by the color.");
     arguments.getApplicationUsage()->addCommandLineOption("--modulate-alpha-by-luminance","For each pixel multiply the alpha value by the luminance.");
     arguments.getApplicationUsage()->addCommandLineOption("--replace-alpha-with-luminance","For each pixel set the alpha value to the luminance.");
+    arguments.getApplicationUsage()->addCommandLineOption("--replace-alpha-with-luminance-inverted","For each pixel set the alpha value to 1-luminance.");
     arguments.getApplicationUsage()->addCommandLineOption("--replace-rgb-with-luminance","For each rgb pixel convert to the luminance.");
     arguments.getApplicationUsage()->addCommandLineOption("--num-components <num>","Set the number of components to in he target image.");
     arguments.getApplicationUsage()->addCommandLineOption("--no-rescale","Disable the rescaling of the pixel data to 0.0 to 1.0 range");
@@ -566,7 +568,9 @@ int main( int argc, char **argv )
     while(arguments.read("--modulate-alpha-by-luminance")) { colourSpaceOperation = osg::MODULATE_ALPHA_BY_LUMINANCE; }
     while(arguments.read("--modulate-alpha-by-colour", colourModulate.x(),colourModulate.y(),colourModulate.z(),colourModulate.w() )) { colourSpaceOperation = osg::MODULATE_ALPHA_BY_COLOR; }
     while(arguments.read("--replace-alpha-with-luminance")) { colourSpaceOperation = osg::REPLACE_ALPHA_WITH_LUMINANCE; }
+    while(arguments.read("--replace-alpha-with-luminance-inverted")) { colourSpaceOperation = osg::REPLACE_ALPHA_WITH_LUMINANCE_INVERTED; }
     while(arguments.read("--replace-rgb-with-luminance")) { colourSpaceOperation = osg::REPLACE_RGB_WITH_LUMINANCE; }
+    
 
 
     enum RescaleOperation
diff --git a/include/osg/ImageUtils b/include/osg/ImageUtils
index a79d739..9ce09fd 100644
--- a/include/osg/ImageUtils
+++ b/include/osg/ImageUtils
@@ -233,6 +233,7 @@ enum ColorSpaceOperation
     MODULATE_ALPHA_BY_LUMINANCE,
     MODULATE_ALPHA_BY_COLOR,
     REPLACE_ALPHA_WITH_LUMINANCE,
+    REPLACE_ALPHA_WITH_LUMINANCE_INVERTED,
     REPLACE_RGB_WITH_LUMINANCE
 };
 
diff --git a/src/osg/ImageUtils.cpp b/src/osg/ImageUtils.cpp
index 6131630..b94ac71 100644
--- a/src/osg/ImageUtils.cpp
+++ b/src/osg/ImageUtils.cpp
@@ -643,6 +643,17 @@ struct ReplaceAlphaWithLuminanceOperator
     inline void rgba(float& r,float& g,float& b,float& a) const { float l = (r+g+b)*0.3333333; a = l; }
 };
 
+struct ReplaceAlphaWithLuminanceInvertedOperator
+{
+    ReplaceAlphaWithLuminanceInvertedOperator() {}
+
+    inline void luminance(float&) const {}
+    inline void alpha(float&) const {}
+    inline void luminance_alpha(float& l,float& a) const { a = 1.0-l; }
+    inline void rgb(float&,float&,float&) const { }
+    inline void rgba(float& r,float& g,float& b,float& a) const { float l = (r+g+b)*0.3333333; a = 1.0-l; }
+};
+
 osg::Image* colorSpaceConversion(ColorSpaceOperation op, osg::Image* image, const osg::Vec4& colour)
 {
     GLenum requiredPixelFormat = image->getPixelFormat();
@@ -651,6 +662,7 @@ osg::Image* colorSpaceConversion(ColorSpaceOperation op, osg::Image* image, cons
         case (MODULATE_ALPHA_BY_LUMINANCE):
         case (MODULATE_ALPHA_BY_COLOR):
         case (REPLACE_ALPHA_WITH_LUMINANCE):
+        case (REPLACE_ALPHA_WITH_LUMINANCE_INVERTED):
             if (image->getPixelFormat()==GL_RGB || image->getPixelFormat()==GL_BGR) requiredPixelFormat = GL_RGBA;
             break;
         case (REPLACE_RGB_WITH_LUMINANCE):
@@ -690,6 +702,12 @@ osg::Image* colorSpaceConversion(ColorSpaceOperation op, osg::Image* image, cons
             osg::modifyImage(image, ReplaceAlphaWithLuminanceOperator());
             return image;
         }
+        case (REPLACE_ALPHA_WITH_LUMINANCE_INVERTED):
+        {
+            OSG_NOTICE<<"doing conversion REPLACE_ALPHA_WITH_LUMINANCE_INVERTED"<<std::endl;
+            osg::modifyImage(image, ReplaceAlphaWithLuminanceInvertedOperator());
+            return image;
+        }
         case (REPLACE_RGB_WITH_LUMINANCE):
         {
             OSG_NOTICE<<"doing conversion REPLACE_RGB_WITH_LUMINANCE"<<std::endl;
diff --git a/src/osgPlugins/las/ReaderWriterLAS.cpp b/src/osgPlugins/las/ReaderWriterLAS.cpp
index f5ab0e3..d54806f 100644
--- a/src/osgPlugins/las/ReaderWriterLAS.cpp
+++ b/src/osgPlugins/las/ReaderWriterLAS.cpp
@@ -28,6 +28,7 @@ class ReaderWriterLAS : public osgDB::ReaderWriter
             supportsExtension("las", "LAS point cloud format");
             supportsExtension("laz", "compressed LAS point cloud format");
             supportsOption("v", "Verbose output");
+            supportsOption("d", "Debug output");
             supportsOption("noScale", "don't scale vertices according to las haeder - put schale in matixTransform");
             supportsOption("noReCenter", "don't transform vertex coords to re-center the pointcloud");
         }
@@ -54,6 +55,7 @@ class ReaderWriterLAS : public osgDB::ReaderWriter
         virtual ReadResult readNode(std::istream& ifs, const Options* options) const {
             // Reading options
             bool _verbose = false;
+            bool _debug = false;
             bool _scale = true;
             bool _recenter = true;
             if (options)
@@ -66,6 +68,10 @@ class ReaderWriterLAS : public osgDB::ReaderWriter
                     {
                         _verbose = true;
                     }
+                    if (opt == "d")
+                    {
+                        _debug = true;
+                    }
                     if (opt == "noScale")
                     {
                         _scale = false;
@@ -127,10 +133,21 @@ class ReaderWriterLAS : public osgDB::ReaderWriter
 
                 // Extract color components from LAS point
                 liblas::Color c = p.GetColor();
+                /*
                 uint32_t r = c.GetRed() >> 8;
                 uint32_t g = c.GetGreen() >> 8;
                 uint32_t b = c.GetBlue() >> 8;
-                uint32_t a = 255;    // default value, since LAS point has no alpha information
+                
+                */
+                /*
+                float r = c.GetRed()/255.0;
+                float g = c.GetGreen()/255.0;
+                float b = c.GetBlue()/255.0;
+                float a = 1.0;*/    // default value, since LAS point has no alpha information
+                uint32_t r = c.GetRed();
+                uint32_t g = c.GetGreen();
+                uint32_t b = c.GetBlue();
+                uint32_t a = 255;
 
                 if (vertices->size() == 0)
                 {
@@ -141,7 +158,7 @@ class ReaderWriterLAS : public osgDB::ReaderWriter
                 {
                     if (singleColor)
                     {
-                        singleColor = singleColorValue == c;//set false if different color found
+                        singleColor = (singleColorValue == c);//set false if different color found
                     }
                 }
                 if (vertices->size() >= targetNumVertices)
@@ -196,7 +213,12 @@ class ReaderWriterLAS : public osgDB::ReaderWriter
                 colours->push_back(osg::Vec4ub(r, g, b, a));
 
                 // Warning: Printing zillion of points may take looong time
-                //std::cout << i << ". " << p << '\n';
+                if (_debug)
+                {
+                    std::cout << i << ". " << p << '\n';
+                    std::cout << "Color: " << r << "," << g << "," << b << '\n';
+                    std::cout << "SingleColor: " << singleColor << '\n';
+                }
                 i++;
             }
             // calculate the mid point of the point cloud
@@ -229,7 +251,7 @@ class ReaderWriterLAS : public osgDB::ReaderWriter
                     << std::endl << std::endl;
             }
 
-            geometry->setUseDisplayList(true);
+            geometry->setUseDisplayList(false);
             geometry->setUseVertexBufferObjects(true);
             geometry->setVertexArray(vertices);
             if (singleColor)
